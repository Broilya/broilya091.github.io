/**
 * @file ВЕРСТКА ВИДЖЕТА | ИНТЕРФЕЙСЫ ВИДЖЕТА
 */

/**
 * ВЕСЬ HTML ВИДЖЕТА СОДЕРЖИТСЯ В ФУНКЦИЯХ
 * @namespace
 * @type {Object}
 */
ocWidget.tpls = {

    /**
     * Вставка в DOM c инициализацией событий
     * @param {Object} container - контейнер для вставки
     * @param {Object} input_data - объект вставки
     */
    insertInToDom: function (container, input_data) {
        if (typeof input_data !== 'object') return;
        container.appendChild(input_data);
        setTimeout(function () {
            ocWidget.tpls.addEvents(input_data);
        }, 0);
    },

    addEvents: function (input_data) {
        var custom_events = [
            'scroll',
            'click',
            'paste',
            'blur',
            'focus',
            'input',
            'change',
            'keydown'
        ];
        custom_events.forEach(function (event) {
            var arr_active_elements = input_data.querySelectorAll('[data-on' + event + ']');
            [].forEach.call(arr_active_elements, function (el) {
                el.addEventListener(event, function (e) {
                    var eval_string = el.getAttribute('data-on' + event);
                    (new Function('event, el', eval_string))(e, el);
                    return false;
                });
            });
        });
    },

    /**
     * Кастомные стили
     * @param  {Object} data - Объект ocWidget.config.styles
     * @return {string}      - Содержимое тега style - СТИЛИ
     */
    css: function (data) {

        if (data === 'default') return '';

        var barPosition;

        ocWidget.options.behaviour.bar.position =
            ocWidget.options.behaviour.bar.panelType === 'round' ? 'bottom-right' : 'center-right';

        switch (ocWidget.options.behaviour.bar.position) {
            case 'bottom-right':
                barPosition = {
                    right: ocWidget.options.behaviour.mobile ? '20px' : '30px',
                    bottom: ocWidget.options.behaviour.mobile ? '20px' : '30px',
                    top: ''
                };
                break;
            case 'center-right':
                barPosition = {
                    right: ocWidget.options.behaviour.mobile ? '20px' : '30px',
                    bottom: ocWidget.options.behaviour.bar.panelType === 'square' ? 'calc(50% - 150px)' : 'calc(50% - 25px)',
                    top: ''
                };
                break;
            default:
                barPosition = {
                    right: ocWidget.options.behaviour.mobile ? '20px' : '30px',
                    bottom: ocWidget.options.behaviour.bar.panelType === 'square' ? 'calc(50% - 150px)' : 'calc(50% - 25px)',
                    top: ''
                };
        }

        var styles = "\
.ocWidget-menu \
.ocWidget__chat__top-menu-block-bot,\
.ocWidget-menu \
.ocWidget__chat__top-menu-block-top {background-color:" + data.chatTitlesColor + "} \
.ocWidget-menu \
.ocWidget__chat__top-menuHeading {color:" + data.chatTitlesColor + "} \
.ocWidget-menu \
.ocWidget__chat__top-menuHeading {} \
.ocWidget__chat__top-menu-block-top,\
.ocWidget__chat__top-menu-block-mid,\
.ocWidget__chat__top-menu-block-bot {background-color:" + data.chatTitlesColor + "} \
.ocWidget__chat__top-icoX:before,\
.ocWidget__chat__top-icoX:after {background-color:" + data.chatTitlesColor + "}\
.ocWidget__bar--outerPanel-text {color: " + data.chatTitlesColor + "} \
.ocWidget__chat__bot__msg--cobrowsePanel-icoX:after, \
.ocWidget__chat__bot__msg--cobrowsePanel-icoX:before {background-color: " + data.chatTitlesColor + "} \
.ocWidget__bar__round:hover \
.ocWidget__bar__round__chat {background-color: " + data.mainFontColor + "} \
.ocWidget__bar, \
.ocWidget__bar__round {bottom: " + barPosition.bottom + ";top: " + barPosition.top + ";right: " + barPosition.right + "} \
.ocWidget__chat__bot__csi-textarea {background-color:" + data.prechatPlaceholder.bgColor + "!important;} \
.ocWidget__chat__mid__alert__message-text {color: " + data.greetingsScreen.fontColor + "} \
.ocWidget__chat__top-menuHeading,\
.ocWidget__chat__top-allHeading,\
.ocWidget__chat__top-msgHeading,\
.ocWidget__chat__top-csiHeading {color:" + (data.chatTitlesColor || data.prechatPlaceholder.bgColor) + "!important;} \
.ocWidget__chat__mid__msg__sentMessage__message-text {background-color: " + data.sentMessage.bgColor + "; color: " + data.sentMessage.fontColor + "} \
.ocWidget__chat__mid__msg__sentMessage__message-text a {color: " + data.sentMessage.fontColor + "} \
.ocWidget__chat__mid__msg__sentImage__message-img {background-color: " + data.sentMessage.bgColor + ";border-color: " + data.sentMessage.bgColor + "} \
.ocWidget__chat__mid__msg__receivedMessage__message-text {background-color: " + data.receivedMessage.bgColor + "; color: " + data.receivedMessage.fontColor + "} \
.ocWidget__chat__mid__msg__receivedMessage__message-text a {color: " + data.receivedMessage.fontColor + "} \
.ocWidget__chat__mid__msg__receivedImage__message-img {background-color: " + data.receivedMessage.bgColor + ";border-color: " + data.receivedMessage.bgColor + "} \
.ocWidget__chat__mid__menu--block-wrapper-item span:hover {border-color: " + data.mainFontColor + "}\
.ocWidget__chat__mid__menu--block-wrapper-item span {border-color: " + data.mainFontColor + ";color: " + data.mainFontColor + "} \
.ocWidget__chat__mid__dragndrop-image:after,\
.ocWidget__chat__mid__dragndrop-image:before {background-color: " + data.mainFontColor + "} \
.ocWidget__chat__mid__dragndrop {border-color: " + data.mainFontColor + "} \
.ocWidget__chat__mid__fileupload--block-dragndrop:before,\
.ocWidget__chat__mid__fileupload--block-dragndrop:after {background-color: " + data.controls.link.fontColor + "} \
.ocWidget__chat__mid__fileupload {border-color: " + (data.dragndrop.color || data.mainFontColor) + "} \
.ocWidget__bar__trigger__messages-message-block {background-color: " + data.receivedMessage.bgColor + "} \
.ocWidget__bar__trigger__messages__buttons-close:hover {background-color: " + data.mainFontColor + "} \
.ocWidget__bar__trigger__messages__buttons-close {color: " + data.mainFontColor + "; border-color: " + data.mainFontColor + "} \
.ocWidget__bar__trigger__messages__buttons-answer:hover {background-color: " + data.mainFontColor + "; color: white} \
.ocWidget__bar__trigger__messages__buttons-answer {border-color: " + data.mainFontColor + "; color: " + data.mainFontColor + "} \
.ocWidget__bar__trigger__messages-message-block {background-color: " + data.mainFontColor + "} \
.ocWidget__bar__round {background-color: " + data.mainFontColor + "} .oc-ico {background-color: " + data.mainFontColor + "} \
.ocWidget__bar {background-color: " + data.mainFontColor + "} \
.ocWidget__bar--innerPanel {background-color: " + data.mainFontColor + "} \
.ocWidget-btnBg {background-color: " + ((typeof data.controls.button != 'undefined' ? data.controls.button.bgColor : data.buttons.bg) || data.mainFontColor) + "; color: " + (typeof data.controls.button != 'undefined' ? data.controls.button.fontColor : data.buttons.color) + "} \
.ocWidget-btnDef {color: " + data.controls.link.fontColor + "} \
.ocWidget-btnDef:hover {border-bottom-color: " + ((typeof data.controls.link != 'undefined' ? data.controls.link.fontColor : data.buttons.color) || data.mainFontColor) + "} \
.ocWidget__chat__top {background-color: " + data.mainFontColor + "} \
.ocWidget__chat__mid__msg__operator-photo img {border-color: " + data.sentMessage.bgColor + "} \
.ocWidget__chat__mid__msg__sentMessage__message-loading \
.ocWidget_spinner > div {background-color: " + data.mainFontColor + "} \
.ocWidget__chat__mid__csi__agent-photo img {border-color: " + data.mainFontColor + "} \
.ocWidget__chat__bot__msg--cobrowsePanel {background-color: " + data.mainFontColor + "} \
.ocWidget__chat__bot__msg__fileUpload-loading {background-color: " + data.mainFontColor + "} \
.ocWidget__chat__mid__msg__sentDoc__message__doc__info-size,\
.ocWidget__chat__mid__msg__receivedDoc__message__doc__info-size {color:" + data.mainFontColor + "} \
.ocWidget__bar--outerPanel-logo {background-image: url('" + data.logo.imgBase64 + "')} \
.ocWidget__chat__mid__msg__systemMessage__message-text {background: " + data.mainFontColor + "} \
.ocWidget_loading-sphere {background: " + data.mainFontColor + "} \
.ocWidget__chat__mid__auth__inputs-select-wrap:after,\
.ocWidget__chat__mid__auth__inputs-select-wrap:before {border-left: 2px " + data.mainFontColor + " solid !important}\
.ocWidget__chat__mid__csi__rank__stars input:checked + .ocWidget__chat__mid__csi__rank__star:before,\
.ocWidget__chat__mid__csi__rank__stars input:checked + .ocWidget__chat__mid__csi__rank__star ~ .ocWidget__chat__mid__csi__rank__star:before,\
.ocWidget__chat__mid__csi__rank__stars > .ocWidget__chat__mid__csi__rank__star:hover:before,\
.ocWidget__chat__mid__csi__rank__stars > .ocWidget__chat__mid__csi__rank__star:hover ~ .ocWidget__chat__mid__csi__rank__star:before\
{color: " + data.mainFontColor + "} \
.ocWidget__chat__mid__auth__inputs \
.ocWidget__chat__mid__auth__inputs-select select:focus, \
.ocWidget__chat__mid__auth__inputs \
.ocWidget__chat__mid__auth__inputs-input input:focus, \
.ocWidget__chat__mid__auth__inputs \
.ocWidget__chat__mid__auth__inputs-input textarea:focus \
{border-color:" + data.prechatPlaceholder.focusBorderColor + "!important;} \
#ocWidget .ocWidget__chat__mid__auth__inputs-input--field,\
#ocWidget .ocWidget__chat__bot__csi-textarea\
{border-color: " + data.prechatPlaceholder.borderColor + ";\
background-color: " + data.prechatPlaceholder.bgColor + ";\
color: " + data.prechatPlaceholder.fontColor + ";} \
.ocWidget__chat__mid__auth__inputs-input--field::placeholder,\
.ocWidget__chat__mid__auth__inputs-input--field::-webkit-input-placeholder,\
.ocWidget__chat__bot__csi-textarea::placeholder,\
.ocWidget__chat__bot__csi-textarea::-webkit-input-placeholder,\
.ocWidget__chat__mid__auth__inputs-input--select \
{ color: " + data.prechatPlaceholder.fontColor + "; } \
.ocWidget__chat__mid__auth__inputs-input--field::-moz-placeholder,\
.ocWidget__chat__mid__auth__inputs-input--field:-ms-input-placeholder,\
.ocWidget__chat__bot__csi-textarea::-moz-placeholder\
.ocWidget__chat__bot__csi-textarea:-ms-input-placeholder\
{ color: " + data.prechatPlaceholder.fontColor + "; }\
.ocWidget__bar-square .ocWidget__bar__trigger__messages-message::after\
{border-left-color: " + data.mainFontColor + "}";

        return styles;
    },

    /**
     * Верстка модального окна шаринга
     * @param  {Object} data - Содержит room и user
     * @return {String} - Верстка
     */
    screenSharing: function (data) {

        var isWebRTCSupported = function () {
            return ('RTCPeerConnection' in window || 'webkitRTCPeerConnection' in window || 'mozRTCPeerConnection' in window || 'RTCIceGatherer' in window)
        }();

        var url = ocWidget.pathConstructor.getSharingPath() + '/',

            frame = '<iframe src="' + ocWidget.pathConstructor.getSharingPath('path') + '?user=' + data.user + '&room=' + data.room + '" width="100%" height="100%"></iframe>',

            video = '<video id="video" autoplay poster="img/webrtc.png" >\
            <source src="' + url + data.room + '" type="webm">\
            </video>',

            interface = isWebRTCSupported ? frame : video;

        var paramsCloseModal = "{data: 'sharing close'}";

        return '<div class="ocWidget_screenSharing" data-onclick="ocWidget.chat.screenSharing.destroy(' + paramsCloseModal + ')">\
                    <div class="screenSharing-content" style="height:' + data.height + 'px; width:' + data.width + 'px;">\
                    <span class="close">&times;</span>\
                    ' + interface + '\
                    </div>\
                    <div class="oc-circle">\
                        <div class="oc-circle1 oc-child"></div>\
                        <div class="oc-circle2 oc-child"></div>\
                        <div class="oc-circle3 oc-child"></div>\
                        <div class="oc-circle4 oc-child"></div>\
                        <div class="oc-circle5 oc-child"></div>\
                        <div class="oc-circle6 oc-child"></div>\
                        <div class="oc-circle7 oc-child"></div>\
                        <div class="oc-circle8 oc-child"></div>\
                        <div class="oc-circle9 oc-child"></div>\
                        <div class="oc-circle10 oc-child"></div>\
                        <div class="oc-circle11 oc-child"></div>\
                        <div class="oc-circle12 oc-child"></div>\
                    </div>\
                </div>'
    },

    /**
     * Верстка системного сообщения
     * @param  {Object} data - содержит text и date
     * @return {string}      - верстка
     */
    systemMessage: function (data) {
        return '<div class="ocWidget__chat__mid__msg__systemMessage">\
                    <div class="ocWidget__chat__mid__msg__systemMessage__message">\
                        <div class="ocWidget__chat__mid__msg__systemMessage__message-text ocWidget-text">' + data.text + '</div>\
                        <div class="ocWidget__chat__mid__msg__systemMessage__message-date ocWidget-description">' + data.date + '</div>\
                    </div>\
                </div>'
    },

    /**
     * Верстка модального окна
     * @param  {Object} data - содержит size и src
     * @return {String}      - верстка
     */
    modal: function (data) {

        var url = ocWidget.pathConstructor.getFileStoragePath('thumb');

        data.size.width = data.size.width > ocWidget.tools.winWidth ? ocWidget.tools.winWidth - 200 : data.size.width;
        data.size.height = data.size.height > ocWidget.tools.winHeight ? ocWidget.tools.winHeight - 200 : data.size.height;

        return '<div class="ocWidget_modal" data-onclick="ocWidget.chat.modal.destroy(event)">\
                      <div class="ocWidget-modal-content">\
                        <span class="ocWidget-modal-close">&times;</span>\
                        <img draggable="false" class="ocWidget-img" src="' + url + data.src + '">\
                      </div>\
                        <div class="oc-circle">\
                          <div class="oc-circle1 oc-child"></div>\
                          <div class="oc-circle2 oc-child"></div>\
                          <div class="oc-circle3 oc-child"></div>\
                          <div class="oc-circle4 oc-child"></div>\
                          <div class="oc-circle5 oc-child"></div>\
                          <div class="oc-circle6 oc-child"></div>\
                          <div class="oc-circle7 oc-child"></div>\
                          <div class="oc-circle8 oc-child"></div>\
                          <div class="oc-circle9 oc-child"></div>\
                          <div class="oc-circle10 oc-child"></div>\
                          <div class="oc-circle11 oc-child"></div>\
                          <div class="oc-circle12 oc-child"></div>\
                        </div>\
                    </div>'
    },

    /**
     * Верстка верхней панели виджета [МЕНЮ] --ЗАГОЛОВОК-- [X]
     * @type {String}
     */
    ocWidget__chat__top: function(){
        return '<div class="ocWidget__chat__top">\
            <div class="ocWidget__chat__top-menu" data-onclick="ocWidget.chat.menu.toggle()">\
                <div class="ocWidget__chat__top-menu-block">\
                    <div class="ocWidget__chat__top-menu-block-top"></div>\
                    <div class="ocWidget__chat__top-menu-block-mid"></div>\
                    <div class="ocWidget__chat__top-menu-block-bot"></div>\
                </div>\
            </div>\
            <div class="ocWidget__chat__top-menuHeading ocWidget-heading">' + ocWidget.locale.menu + '</div>\
            <div class="ocWidget__chat__top-allHeading ocWidget-heading">' + ocWidget.options.behaviour.styles.textChatTitle + '</div>\
            <div class="ocWidget__chat__top-msgHeading ocWidget-description">' + ocWidget.options.behaviour.styles.textChatSubTitle + '</div>\
            <div class="ocWidget__chat__top-csiHeading ocWidget-heading">' + ocWidget.locale.rating + '</div>\
            <div class="ocWidget__chat__top-icoX" data-onclick="ocWidget.chat.hide()"></div>\
            <div class="ocWidget__chat__top-unreadMessages">0</div>\
        </div>';
    },

    /**
     * Верстка звездочек csi рейтинга
     * @return {String} - верстка
     */
    renderStars: function (num) {
        var stars = '';
        for (var i = num; i > 0; i--) {
            stars += '<input id="csi_rate_' + i + '" class="ocWidget__chat__mid__csi__rank__star-input" type="checkbox" value="' + i + '">' +
                '<label for="csi_rate_' + i + '" class="ocWidget__chat__mid__csi__rank__star ocWidgetIcon-favorite"></label>'
        }
        return stars;
    },

    /**
     * Верстка средней панели виджета ( экраны )
     * @return {String} - верстка
     */
    ocWidget__chat__mid: function () {
        var photo = ocWidget.auth.operator.agent_photo.split(',');
        photo = ocWidget.tools.isBase64(photo[1]) ? ocWidget.auth.operator.agent_photo : ocWidget.auth.operator.agent_photo + '?token=' + ocWidget.tools.encodePath(ocWidget.options.settings.token);
        return '\
            <div class="ocWidget__chat__horizontal-block">\
                <div class="ocWidget__chat__horizontal-block-center">\
                    <div class="ocWidget__chat__horizontal-block-text ocWidget-heading">' + ocWidget.locale.turnDevice + '</div>\
                </div>\
            </div>\
            <div class="ocWidget__chat__mid">\
                <div class="ocWidget_loading-block">\
                    <div class="ocWidget_loading-sphere"></div>\
                </div>\
                <div class="ocWidget__chat__mid__menu">\
                    <div class="ocWidget__chat__mid__menu--block">\
                    <div class="ocWidget__chat__mid__menu--block-wrapper">\
                    <div class="ocWidget__chat__mid__menu--block-wrapper-item ocWidget-heading">' + ocWidget.locale.sessionCode + ' - <span id="ocWidget-sessionCode">?</span>\
                        <div class="ocWidget__chat__mid__menu-listInfo" title="' + ocWidget.locale.sessionCodeDescr + '"></div>\
                    </div>'+
                        ocWidget.tpls.channels.getChannelsForScreenString('menu')
                    +'<a class="ocWidget__chat__mid__menu--block-wrapper-item" href="#" data-onclick="ocWidget.chat.hide()"><span class="ocWidget-text">' + ocWidget.locale.hideChat + '</span></a>\
                    </div>\
                    </div>\
                        <a href="http://omnichat.ru/" target="_blank"><div class="ocWidget__chat__mid__menu-copyright"></div></a>\
                </div>'+
                ocWidget.tpls.authPrechats('primary')+
                ocWidget.tpls.authPrechats('secondary') +
                '<div class="ocWidget__chat__mid__alert">\
                    <div class="ocWidget__chat__mid__alert__message">\
                        <div class="ocWidget__chat__mid__alert__message-text ocWidget-heading">' + ocWidget.locale.greeting + '</div>\
                        <div class="ocWidget__chat__mid__alert__message-link"></div>\
                    </div>\
                </div>'+
                ocWidget.tpls.offline.printAll() +
                '<div class="ocWidget__chat__mid__msg" data-onscroll="ocWidget.chat.msg.pagination.scroll(event)"></div>\
                <form class="ocWidget__chat__mid__file-form">\
                <div class="ocWidget__chat__mid__fileupload">\
                    <div class="ocWidget__chat__mid__fileupload--block">\
                        <div class="ocWidget__chat__mid__fileupload--block-heading ocWidget-heading">' + ocWidget.locale.sendFileTitle + '</div>\
                        <div class="ocWidget__chat__mid__fileupload--block-error-ext">' + ocWidget.locale.unsupportedFile + '</div>\
                        <div class="ocWidget__chat__mid__fileupload--block-error-size">' + ocWidget.locale.largeFile + '</div>\
                        <div class="ocWidget__chat__mid__fileupload--block-dragndrop"><input type="file" name="file1" id="ocWidget-fileUploadInput" data-onchange="ocWidget.chat.msg.fileUpload.check();"></div>\
                        <label for="ocWidget-fileUploadInput" class="ocWidget__chat__mid__fileupload--block-label ocWidget-btnBg">' + ocWidget.locale.chooseFileBtn + '</label>\
                        <br>\
                        <div class="ocWidget__chat__mid__fileupload--block-deny ocWidget-btnDef" data-onclick="ocWidget.chat.msg.fileUpload.hide(true)">' + ocWidget.locale.cancelBtn + '</div>\
                    </div>\
                </div>\
                <div class="ocWidget__chat__mid__dragndrop">\
                    <div class="ocWidget__chat__mid__dragndrop-image"></div>\
                    <input class="ocWidget__chat__mid__dragndrop-input" type="file" name="file2" id="ocWidget-dragndropInput" data-onchange="ocWidget.chat.msg.fileUpload.check();">\
                </div>\
                </form>\
                <div class="ocWidget__chat__mid__csi">\
                    <div class="ocWidget__chat__mid__csi__rank">\
                        <div class="ocWidget__chat__mid__csi__rank-text ocWidget-text">' + ocWidget.locale.lcrMsg + '</div>\
                    </div>\
                    <div class="ocWidget__chat__mid__csi__agent">\
                        <div class="ocWidget__chat__mid__csi__agent-photo"><img draggable="false" src="' + photo  + '" alt=""></div>\
                        <div class="ocWidget__chat__mid__csi__agent-name">' + ocWidget.auth.operator.agent_name + '</div>\
                    </div>\
                    <div class="ocWidget__chat__mid__csi__rank__stars">\
                        ' + this.renderStars(5) + '\
                    </div>\
                </div>\
            </div>'
    },

    /**
     * Верстка нижней панели виджета ( textearea )
     * @type {String}
     */
    ocWidget__chat__bot: function(){
        return   '\
            <div class="ocWidget__chat__bot">\
                <div class="ocWidget__chat__bot__msg">\
                        <div class="ocWidget__chat__bot__msg--typing">\
                        <div class="ocWidget__chat__bot__msg--typing-text ocWidget-description">' + ocWidget.locale.typing + '</div>\
                        <div class="ocWidget_spinner">\
                          <div class="ocWidget_bounce1"></div>\
                          <div class="ocWidget_bounce2"></div>\
                          <div class="ocWidget_bounce3"></div>\
                        </div>\
                        </div>\
                <div class="ocWidget__chat__bot__msg--cobrowsePanel">\
                    <div class="ocWidget__chat__bot__msg--cobrowsePanel-heading ocWidget-heading">' + ocWidget.locale.cobrowsingRequestTitle + '</div>\
                    <div class="ocWidget__chat__bot__msg--cobrowsePanel--loading">\
                    <div class="ocWidget__chat__bot__msg--cobrowsePanel--loading-heading ocWidget-heading">' + ocWidget.locale.connection + '</div>\
                    <div class="ocWidget_spinner">\
                      <div class="ocWidget_bounce1"></div>\
                      <div class="ocWidget_bounce2"></div>\
                      <div class="ocWidget_bounce3"></div>\
                    </div>\
                    </div>\
                    <div class="ocWidget__chat__bot__msg--cobrowsePanel-icoX" data-onclick="ocCobrowsing.destroy()"></div>\
                </div>\
                    <textarea   placeholder="' + ocWidget.locale.messagePlaceholder + '" \
                                class="ocWidget__chat__bot__msg-textarea" \
                                data-onfocus="ocWidget.chat.msg.textarea.onfocus()" \
                                data-onblur="ocWidget.chat.msg.textarea.onblur()" \
                                data-oninput="ocWidget.chat.msg.textarea.oninput(event)" \
                                data-onpaste="ocWidget.chat.msg.textarea.onpaste(event)" \
                                data-onkeydown="ocWidget.chat.msg.textarea.onkeydown(event)"></textarea>\
                    <div class="ocWidget__chat__bot__msg-textarea--gradient"></div>\
                    <div class="ocWidget__chat__bot__msg-textarea--blockInput ocWidget-text">' + ocWidget.locale.maximumOfCharacters + '</div>\
                    <div class="ocWidget__chat__bot__msg__fileUpload">\
                        <div class="ocWidget__chat__bot__msg__fileUpload-loading"></div>\
                        <div class="ocWidget__chat__bot__msg__fileUpload-ico">\
                        ' + ocWidget.tpls.svgIcons.get({name:'file',
                                                        color: ocWidget.options.behaviour.styles.mainFontColor}) + '\
                        </div>\
                        <div class="ocWidget__chat__bot__msg__fileUpload-error-ext ocWidget-text">' + ocWidget.locale.unsupportedFile + '</div>\
                        <div class="ocWidget__chat__bot__msg__fileUpload-error-size ocWidget-text">' + ocWidget.locale.largeFile2 + '</div>\
                        <div class="ocWidget__chat__bot__msg__fileUpload-text ocWidget-text">' + ocWidget.locale.fileName + '</div>\
                        <div class="ocWidget__chat__bot__msg__fileUpload-icoX" data-onclick="ocWidget.chat.msg.fileUpload.clear();return false;"></div>\
                    </div>\
                    <div class="ocWidget__chat__bot__msg-file ocWidget-btnDef" data-onclick="ocWidget.chat.msg.fileUpload.show()">' + ocWidget.locale.attachFile + '</div>\
                    <div class="ocWidget__chat__bot__msg-send ocWidget-btnBg" data-onclick="ocWidget.chat.msg.message.send()">' + ocWidget.locale.sendBtn + '</div>\
                </div>\
                <div class="ocWidget__chat__bot__csi">\
                    <div class="ocWidget__chat__bot__csi-heading ocWidget-text">' + ocWidget.locale.comment + ':</div>\
                    <textarea placeholder="' + ocWidget.locale.notSpecified + '" value="" class="ocWidget__chat__bot__csi-textarea ocWidget-text"></textarea>\
                    <div class="ocWidget__chat__bot__csi-send ocWidget-btnBg">' + ocWidget.locale.sendBtn + '</div>\
                </div>\
            </div>';
    },

    /**
     * Верстка БАРа
     * @param  {Object} channels - объект ocWidget.options.channels
     * @return {string}          - верстка
     */
    ocWidget__bar: function () {

        if (!ocWidget.tpls.channels.getCountOneTypeChannels()){
            RTC(ocWidget.el.widget).addClass('ocWidget-no-channels');
        }

        return this['ocWidget__bar__' + ocWidget.options.behaviour.bar.panelType]();

    },

    /**
     * Верстка прямоугольного виджета
     * ИНТЕРФЕЙС ПАНЕЛИ
     * @return {String}     - верстка
     */
    ocWidget__bar__square: function(){
        var channelsIcons = ocWidget.tpls.channels.getChannelsForScreenString('squareBarIcons'),
            channelsLinks = ocWidget.tpls.channels.getChannelsForScreenString('squareBarLinks'),
            display = 'style="display:block"',
            countChannels= ocWidget.tpls.channels.getCountOneTypeChannels();

        if (!ocWidget.options.behaviour.isBarShown) {
            display = 'style="display:none"'
        }

         return '<div class="ocWidget__bar ocWidget__bar-square ocWidget__bar-channels-' + countChannels + '" ' + display + '>\
                     <div class="ocWidget__bar--outerPanel-unreadMessages">0</div>\
                     <div class="ocWidget__bar--outerPanel">\
                         <div class="ocWidget__bar--outerPanel-logo"></div>\
                         <div class="ocWidget__bar--outerPanel-text">' + ocWidget.locale.contactUs + '</div>\
                         <div class="ocWidget__bar--outerPanel--ico">\
                            ' + channelsIcons + '\
                            <span class="oc-ico oc-ico-chat" style="transform: scale(1);"><span></span></span>\
                         </div>\
                     </div>\
                     <div class="ocWidget__bar--innerPanel">\
                        <div class="ocWidget__bar--innerPanel-webChat" data-onclick="ocWidget.chat.init()">\
                        <div class="ocWidget__bar--innerPanel-webChat-tooltip ocWidget-text">' + ocWidget.locale.contactViaChat + '</div>\
                        </div>\
                        ' + channelsLinks + '\
                     </div>\
                     <div class="ocWidget__bar__trigger__messages"></div>\
                </div>';

    },

    /**
     * Верстка круглого виджета
     * @return {String}     - верстка
     */
    ocWidget__bar__round: function () {
        var animateChannels = '',
            display = '',
            tooltip = '',
            animateClass = '',
            animateIcons = '';

        if((ocWidget.options.behaviour.bar.animation.isEnabled && ocWidget.options.behaviour.bar.animation.type == 'channels') || ocWidget.options.behaviour.bar.animation === true ) {
            animateIcons = ocWidget.tpls.channels.getChannelsForScreenString('roundBarIcons');
            animateChannels = ' animation';
            animateClass = 'channels';
        }
        else {
            if(ocWidget.options.behaviour.bar.tooltipText) {
                tooltip = '<div class="ocWidget__bar__round__tooltip ocWidget-text">' + ocWidget.options.behaviour.bar.tooltipText + '</div>';
            }
            if(ocWidget.options.behaviour.bar.animation.isEnabled && ocWidget.options.behaviour.bar.animation.type == 'icons') {
                animateIcons = ocWidget.tpls.getSimpleBarIconsString(ocWidget.options.behaviour.bar.animation.icons);
                animateClass = ocWidget.options.behaviour.bar.animation.type;
            }
        }

        if(animateIcons) {
            animateIcons = '<div class="ocWidget__bar__round__' + animateClass + '"' + (!animateChannels ? ' data-onclick="ocWidget.chat.init()"': '') + '>\
                                 ' + animateIcons + '\
                            </div>';
        }

        if (!ocWidget.options.behaviour.isBarShown) {
            display = 'style="display:none"';
        }

        return '<div class="ocWidget__bar__round'+ animateChannels +'" ' + display + '>\
                    <div class="ocWidget__bar__round__chat-unreadMessages">0</div>\
                    <div class="ocWidget__bar__round__chat" data-onclick="ocWidget.chat.init()">' +
                        '<span><img src="' +
                            ocWidget.options.behaviour.bar.animation.icons.mainIcon.imgBase64 +
                         '"></span>\
                    </div>' + animateIcons + tooltip + '<div class="ocWidget__bar__trigger__messages"></div>\
                </div>';
    },
    /**
     * Генерация строки с иконками для анимации в баре
     * @param icons
     * @returns {string}
     */
    getSimpleBarIconsString: function(icons){
        var result = '';
        for(var i in icons){
            if(icons.hasOwnProperty(i)) {
                if(i === 'mainIcon') continue;
                if(icons[i].imgBase64) {
                    result += '<div class="ocWidget__bar__round__channels__channel">\
                                       <span class="ocWidget__bar__round__channels__channel-' + i + '">\
                                           <img src="' +
                                           icons[i].imgBase64 + '" alt="">\
                                       <\span>\
                                   </div>';
                }
            }
        }
        return result;
    },

    /**
     * Верстка загрузки (не используется)
     * ИНТЕРФЕЙС ЗАГРУЗКИ ИСХОДЯЩЕГО СООБЩЕНИЯ
     * @type {String}
     */
    loadingMessage: function(){
        return '<div class="ocWidget__chat__mid__msg__sentMessageLoading">\
                    <div class="ocWidget-message-loading">\
                        <div class="oc-loading-sphere"></div>\
                    </div>\
                </div>';
    },

    /**
     * Верстка иконки оператора
     * @param  {Number} agent_id - id Агента
     * @return {String}     - верстка
     */
    operator: function (agent_id) {

        var agent = {
            photo: ocWidget.auth.operator[agent_id].agent_photo,
            name: ocWidget.auth.operator[agent_id].agent_name,
            group: ocWidget.auth.operator[agent_id].group_name,
        };

        
        agent.photo = agent.photo.split(',');
        agent.photo = ocWidget.tools.isBase64(agent.photo[1]) ? agent.photo : agent.photo + '?token=' + ocWidget.tools.encodePath(ocWidget.options.settings.token);

        return '<div class="ocWidget__chat__mid__msg__operator">\
                    <div class="ocWidget__chat__mid__msg__operator-photo">\
                        <img draggable="false" src="' + agent.photo + '" alt="">\
                    </div>\
                    <div class="ocWidget__chat__mid__msg__operator-name ocWidget-text">' + agent.name + '</div>\
                    <!-- <div class="ocWidget__chat__mid__msg__operator-name ocWidget-text">' + agent.group + '</div> -->\
                </div>'
    },

    /**
     * Верстка сообщения "Печатает" ( не используется )
     * @return {String}     - верстка
     */
    typing: function () {
        return '<div class="ocWidget__chat__mid__msg__receivedMessage">\
                    <div class="ocWidget__chat__mid__msg__receivedMessage__message">\
                        <div class="ocWidget__chat__mid__msg__receivedMessage__message-text ocWidget-text">\
                        <div class="ocWidget__chat__mid__msg__receivedMessage__message-typing--text">' + ocWidget.locale.typing + '...</div>\
                        <div class="ocWidget__chat__mid__msg__receivedMessage__message-typing--animation">\
                            <div class="ocWidget_spinner">\
                                <div class="ocWidget_bounce1"></div>\
                                <div class="ocWidget_bounce2"></div>\
                                <div class="ocWidget_bounce3"></div>\
                            </div>\
                        </div>\
                    </div>\
                    </div>\
                </div>'
    },

    /**
     * Верстка входящего сообщения
     * @param  {Object} data - содержит text и date
     * @return {String}     - верстка
     */
    receivedMessage: function (data) {
        return '<div class="ocWidget__chat__mid__msg__receivedMessage">\
                    <div class="ocWidget__chat__mid__msg__receivedMessage__message">\
                        <div class="ocWidget__chat__mid__msg__receivedMessage__message-text ocWidget-text">' + data.text + '</div>\
                        <div class="ocWidget__chat__mid__msg__receivedMessage__message-date ocWidget-description">' + data.date + '</div>\
                    </div>\
                </div>'
    },

    /**
     * Верстка сообщения появляющегося над круглым виджетом
     * @param  {Object} data - Содержит text
     * @return {String}     - верстка
     */
    barMessage: function (data) {
        return '<div class="ocWidget__bar__trigger__messages-message-block" data-onclick="ocWidget.chat.init()">\
                    <div class="ocWidget__bar__trigger__messages-message-block-text">' + data.text + '</div>\
                </div>'
    },

    /**
     * Верстка исходящего сообщения
     * @param  {Object} data - содержит text и date
     * @return {String}     - верстка
     */
    sentMessage: function (data) {
        return '<div class="ocWidget__chat__mid__msg__sentMessage" data-onclick="ocWidget.chat.msg.message.retry(event, el)">\
                     <div class="ocWidget__chat__mid__msg__sentMessage__message">\
                        <div class="ocWidget__chat__mid__msg__sentMessage__message-text ocWidget-text">' + data.text + '</div>\
                        <div class="ocWidget__chat__mid__msg__sentMessage__message-date ocWidget-description">' + data.date + '</div>\
                        <div class="ocWidget__chat__mid__msg__sentMessage__message-loading">\
                            <div class="ocWidget_spinner">\
                              <span class="ocWidget__chat__mid__msg__sentMessage__message-loading--loading ocWidget-description">' + ocWidget.locale.sending + '</span>\
                              <div class="ocWidget_bounce1"></div>\
                              <div class="ocWidget_bounce2"></div>\
                              <div class="ocWidget_bounce3"></div>\
                            </div>\
                        </div>\
                        <div class="ocWidget__chat__mid__msg__sentMessage__message--deliver">\
                            <span class="ocWidget__chat__mid__msg__sentMessage__message--deliver-not ocWidget-description">' + ocWidget.locale.sendError + '</span>\
                            <span class="ocWidget__chat__mid__msg__sentMessage__message--deliver-refresh ocWidget-description">' + ocWidget.locale.repeat + '</span>\
                        </div>\
                    </div>\
                </div>'
    },

    /**
     * Верстка исходящего изображения
     * @param  {Object} data - содержит src и modal(src превью)
     * @return {String}     - верстка
     */
    sentImage: function (data) {

        var url = ocWidget.pathConstructor.getFileStoragePath('thumb');

        var linkArray = data.src.match(/^([^\/]+\/)[A-Z]:.*\\([^\\]*)$/);
        if (linkArray != null && linkArray.length == 3)
            data.src = linkArray[1] + linkArray[2];

        linkArray = data.modal.match(/^([^\/]+\/)[A-Z]:.*\\([^\\]*)$/);
        if (linkArray != null && linkArray.length == 3)
            data.modal = linkArray[1] + linkArray[2];

        return '<div class="ocWidget__chat__mid__msg__sentImage" data-onclick="ocWidget.chat.msg.message.retry(event, el)">\
                    <div class="ocWidget__chat__mid__msg__sentImage__message">\
                        <div class="ocWidget__chat__mid__msg__sentImage__message-img">\
                            <img draggable="false" class="ocWidget-img" src="' + url + data.src + '?token=' + ocWidget.tools.encodePath(ocWidget.options.settings.token) + '">\
                            <div class="ocWidget-preview" data-modal="' + data.modal + '?token=' + ocWidget.tools.encodePath(ocWidget.options.settings.token) + '" data-onclick="ocWidget.chat.modal.init(el)"></div>\
                        </div>\
                        <div class="ocWidget__chat__mid__msg__sentImage__message-date ocWidget-description">' + data.date + '</div>\
                        <div class="ocWidget__chat__mid__msg__sentMessage__message-loading">\
                            <div class="ocWidget_spinner">\
                              <span class="ocWidget__chat__mid__msg__sentMessage__message-loading--loading ocWidget-description">' + ocWidget.locale.sending + '</span>\
                              <div class="ocWidget_bounce1"></div>\
                              <div class="ocWidget_bounce2"></div>\
                              <div class="ocWidget_bounce3"></div>\
                            </div>\
                        </div>\
                        <div class="ocWidget__chat__mid__msg__sentImage__message--deliver">\
                            <span class="ocWidget__chat__mid__msg__sentImage__message--deliver-not ocWidget-description">' + ocWidget.locale.sendError + '</span>\
                            <span class="ocWidget__chat__mid__msg__sentImage__message--deliver-refresh ocWidget-description">' + ocWidget.locale.repeat + '</span>\
                        </div>\
                    </div>\
                </div>'
    },

    /**
     * Верстка входяшего изображения
     * @param  {Object} data - содержит src и modal(src превью)
     * @return {String}     - верстка
     */
    receivedImage: function (data) {

        var url = ocWidget.pathConstructor.getFileStoragePath('thumb');

        var linkArray = data.src.match(/^([^\/]+\/)[A-Z]:.*\\([^\\]*)$/);
        if (linkArray != null && linkArray.length == 3)
            data.src = linkArray[1] + linkArray[2];

        linkArray = data.modal.match(/^([^\/]+\/)[A-Z]:.*\\([^\\]*)$/);
        if (linkArray != null && linkArray.length == 3)
            data.modal = linkArray[1] + linkArray[2];

        var token = '?token=' + ocWidget.tools.encodePath(ocWidget.options.settings.token);

        return '<div class="ocWidget__chat__mid__msg__receivedImage">\
                    <div class="ocWidget__chat__mid__msg__receivedImage__message">\
                        <div class="ocWidget__chat__mid__msg__receivedImage__message-img">\
                            <img draggable="false" class="ocWidget-img" src="' + url + data.src + token + '">\
                            <div class="ocWidget-preview" data-modal="' + data.modal + token + '" data-onclick="ocWidget.chat.modal.init(el)"></div>\
                        </div>\
                        <div class="ocWidget__chat__mid__msg__receivedImage__message-date ocWidget-description">' + data.date + '</div>\
                    </div>\
                </div>'
    },

    /**
     * Верстка запроса кобраузинга
     * @param  {Object} data - содержит date
     * @return {String}      - верстка
     */
    cobrowsingRequest: function (data) {
        return '<div class="ocWidget__chat__mid__msg__receivedMessage ocWidget ocWidget__chat__mid__msg__receivedRequest">\
                    <div class="ocWidget__chat__mid__msg__receivedRequest__message">\
                        <div class="ocWidget__chat__mid__msg__receivedRequest__message__content">\
                            <div class="ocWidget__chat__mid__msg__receivedRequest__message__content-heading ocWidget-heading">' + ocWidget.locale.cobrowsingRequestTitle + '</div>\
                            <div class="ocWidget__chat__mid__msg__receivedRequest__message__content-text ocWidget-text">\
                                ' + ocWidget.locale.cobrowsingRequestDesc + '\
                            </div>\
                            <div class="ocWidget__chat__mid__msg__receivedRequest__message__content__buttons">\
                                <div href="" class="ocWidget-btnBg ocWidget ocWidget__chat__mid__msg__receivedRequest__message__content__buttons-agree" data-onclick="ocWidget.chat.msg.cobrowsing.init()">' + ocWidget.locale.cobrowsingOn + '</div>\
                                <div href="" class="ocWidget-btnDef ocWidget ocWidget__chat__mid__msg__receivedRequest__message__content__buttons-deny" data-onclick="ocWidget.chat.msg.cobrowsing.delete()">' + ocWidget.locale.cobrowsingOff + '</div>\
                            </div>\
                        </div>\
                        <div class="ocWidget__chat__mid__msg__receivedRequest__message-date ocWidget-description">' + data.date + '</div>\
                    </div>\
                </div>'
    },

    /**
     * Верстка запроса шаринга
     * @param  {Object} data - содержит date
     * @return {String}      - верстка
     */
    sharingRequest: function (data) {
        return '<div class="ocWidget__chat__mid__msg__receivedMessage ocWidget ocWidget__chat__mid__msg__receivedRequest">\
                    <div class="ocWidget__chat__mid__msg__receivedRequest__message">\
                        <div class="ocWidget__chat__mid__msg__receivedRequest__message__content">\
                            <div class="ocWidget__chat__mid__msg__receivedRequest__message__content-heading">' + ocWidget.locale.sharingTitle + '</div>\
                            <div class="ocWidget__chat__mid__msg__receivedRequest__message__content-text ocWidget-text">' + ocWidget.locale.sharingDesc + '</div>\
                        </div>\
                        <div class="ocWidget__chat__mid__msg__receivedRequest__message-date ocWidget-description">' + data.date + '</div>\
                    </div>\
                </div>'
    },

    /**
     * Верстка исходящего документа
     * @param  {Object} data - содержит href, type и date
     * @return {String}      - верстка
     */
    sentDoc: function (data) {

        var url = ocWidget.pathConstructor.getFileStoragePath('thumb'),
            name;

        if (/\\/.test(data.file.href))
            name = data.file.href.split(/\\/);
        else
            name = data.file.href.split(/\//);

        var linkArray = data.file.href.match(/^([^\/]+\/)[A-Z]:.*\\([^\\]*)$/);

        if (linkArray != null && linkArray.length == 3)
            data.file.href = linkArray[1] + linkArray[2];

        return '<div class="ocWidget__chat__mid__msg__sentDoc" data-onclick="ocWidget.chat.msg.message.retry(event, el)">\
                    <div class="ocWidget__chat__mid__msg__sentDoc__message">\
                    <a target="_blank" href=' + url + data.file.href + '?token=' + ocWidget.tools.encodePath(ocWidget.options.settings.token) + '>\
                        <div class="ocWidget__chat__mid__msg__sentDoc__message__doc">\
                            <div class="ocWidget__chat__mid__msg__sentDoc__message__doc-img">\
                                ' + ocWidget.tpls.svgIcons.get({name:'file',
                                                                color: ocWidget.options.behaviour.styles.mainFontColor}) + '\
                            </div>\
                            <div class="ocWidget__chat__mid__msg__sentDoc__message__doc__info">\
                                <div class="ocWidget__chat__mid__msg__sentDoc__message__doc__info-name ocWidget-text">' + name[name.length - 1] + '</div>\
                                <div class="ocWidget__chat__mid__msg__sentDoc__message__doc__info-size">' + data.file.type + '</div>\
                            </div>\
                        </div>\
                    </a>\
                        <div class="ocWidget__chat__mid__msg__sentDoc__message-date ocWidget-description">' + data.date + '</div>\
                        <div class="ocWidget__chat__mid__msg__sentMessage__message-loading">\
                            <div class="ocWidget_spinner">\
                              <span class="ocWidget__chat__mid__msg__sentMessage__message-loading--loading ocWidget-description">' + ocWidget.locale.sending + '</span>\
                              <div class="ocWidget_bounce1"></div>\
                              <div class="ocWidget_bounce2"></div>\
                              <div class="ocWidget_bounce3"></div>\
                            </div>\
                        </div>\
                        <div class="ocWidget__chat__mid__msg__sentImage__message--deliver">\
                            <span class="ocWidget__chat__mid__msg__sentImage__message--deliver-not ocWidget-description">' + ocWidget.locale.sendError + '</span>\
                            <span class="ocWidget__chat__mid__msg__sentImage__message--deliver-refresh ocWidget-description">' + ocWidget.locale.repeat + '</span>\
                        </div>\
                    </div>\
                </div>'
    },

    /**
     * Верстка входящего документа
     * @param  {Object} data - содержит href, type и date
     * @return {String}      - верстка
     */
    receivedDoc: function (data) {
        if (!ocWidget.auth.operator[data.agent_id]) ocWidget.auth.operator[data.agent_id] = ocWidget.auth.operator;

        var url = ocWidget.pathConstructor.getFileStoragePath('thumb'),
            name;

        if (/\\/.test(data.file.href))
            name = data.file.href.split(/\\/);
        else
            name = data.file.href.split(/\//);

        var linkArray = data.file.href.match(/^([^\/]+\/)[A-Z]:.*\\([^\\]*)$/);
        if (linkArray != null && linkArray.length == 3)
            data.file.href = linkArray[1] + linkArray[2];

        return '<div class="ocWidget__chat__mid__msg__receivedDoc">\
                    <div class="ocWidget__chat__mid__msg__receivedDoc__message">\
                    <a target="_blank" href=' + url + data.file.href + '?token=' + ocWidget.tools.encodePath(ocWidget.options.settings.token) + '>\
                        <div class="ocWidget__chat__mid__msg__receivedDoc__message__doc">\
                            <div class="ocWidget__chat__mid__msg__receivedDoc__message__doc-img">\
                            ' + ocWidget.tpls.svgIcons.get({name:'file',
                                                        color: ocWidget.options.behaviour.styles.mainFontColor}) + '\
                            </div>\
                            <div class="ocWidget__chat__mid__msg__receivedDoc__message__doc__info">\
                                <div class="ocWidget__chat__mid__msg__receivedDoc__message__doc__info-name ocWidget-text">' + name[name.length - 1] + '</div>\
                                <div class="ocWidget__chat__mid__msg__receivedDoc__message__doc__info-size">' + data.file.type + '</div>\
                            </div>\
                        </div>\
                    </a>\
                        <div class="ocWidget__chat__mid__msg__receivedDoc__message-date ocWidget-description">' + data.date + '</div>\
                    </div>\
                </div>'
    },

    /**
     * Показывает/прячет кнопку "Показать историю"
     * @param  {Boolean} toggle - индикатор наличия сообщений в истории
     * @return {void}
     */
     toggleHistoryBtn: function(toggle) {
         if(!toggle) {
             RTC('.ocWidget__chat__mid__auth-secondary-showHistory').style.display = 'none';
             RTC('.ocWidget__chat__mid__offline-showHistory').style.display = 'none';
         } else {
             RTC('.ocWidget__chat__mid__auth-secondary-showHistory').style.display = 'block';
             RTC('.ocWidget__chat__mid__offline-showHistory').style.display = 'block';
         }
     },

    /**
     * генерация пречатполей по настройкам из конфига
     * @returns {*}
     */
    authPrechats: function(screen){

        var prechatsFactory = {

            fieldsByTypes: {

                text: function(data){
                    var result = '<div class="ocWidget__chat__mid__auth__inputs-input ocWidget__chat__mid__auth__inputs-input-'+data.name+'">\
                            <div class="ocWidget__chat__mid__auth__inputs-input--heading ocWidget-text">'
                                + ocWidget.locale.prechats[data.name].label + ': ' + this.isisNecessary(data.isNecessary) +'\
                            </div>\
                            <input id="ocWidget-auth-'+data.name+'"\
                                    type="text" name="'+data.name+'"\
                                    class="ocWidget__chat__mid__auth__inputs-input--field ocWidget-text"\
                                    placeholder="' + ocWidget.locale.prechats[data.name].placeholder + '"\
                                    autocomplete="off"\
                                    data-oninput="ocWidget.chat.auth.prechats.clearError(event)">\
                     </div>';

                    return result;
                },

                phone: function(data){
                    var result = '<div class="ocWidget__chat__mid__auth__inputs-input ocWidget__chat__mid__auth__inputs-input-'+data.name+'">\
                            <div class="ocWidget__chat__mid__auth__inputs-input--heading ocWidget-text">'
                                + ocWidget.locale.prechats[data.name].label + ': ' + this.isisNecessary(data.isNecessary) +'\
                            </div>\
                            <input id="ocWidget-auth-'+data.name+'" \
                                    type="text" name="'+data.name+'"\
                                    class="ocWidget__chat__mid__auth__inputs-input--field ocWidget-text"\
                                    placeholder="+7 ( ___ ) ___ - __ - __"\
                                    data-onfocus="ocWidget.chat.auth.input.focus(event)"\
                                    data-onblur="ocWidget.chat.auth.input.blur(event)"\
                                    data-oninput="ocWidget.chat.auth.input.mask(event); ocWidget.chat.auth.prechats.clearError(event)">\
                        </div>';

                    return result;
                },

                textarea: function(data){
                    var result = '<div class="ocWidget__chat__mid__auth__inputs-input ocWidget__chat__mid__auth__inputs-input-'+data.name+'">\
                            <div class="ocWidget__chat__mid__auth__inputs-input--heading ocWidget-text">'
                                + ocWidget.locale.prechats[data.name].label + ': ' + this.isisNecessary(data.isNecessary) +'\
                            </div>\
                            <textarea id="ocWidget-auth-'+data.name+'"\
                                        name="'+data.name+'"\
                                        class="ocWidget__chat__mid__auth__inputs-input--field ocWidget-text"\
                                        placeholder="' + ocWidget.locale.prechats[data.name].placeholder + '"\
                                        data-oninput="ocWidget.chat.auth.prechats.clearError(event)"></textarea>\
                        </div>';

                    return result;
                },

                select: function(data){

                    var options = '', result = '', action;

                    if(data.values && data.values.length){
                        for(var i in data.values){
                            if(data.values.hasOwnProperty(i)) {
                                if(!data.values[i].alias) continue;
                                options += '<option value="'+data.values[i].id+'">'+data.values[i].alias+'</option>';
                            }
                        }
                    }

                    if(options) {

                        action = data.action ? 'ocWidget.chat.auth.prechats.actions.' + data.action + '(\'' + data.name + '\')' : '';

                        result = '<div class="ocWidget__chat__mid__auth__inputs-select ocWidget__chat__mid__auth__inputs-input-'+data.name + ' '
                            +( data.checkOffline ? 'ocWidget-check-offline' : '' )+
                            '">\
                            <div class="ocWidget__chat__mid__auth__inputs-input--heading ocWidget-text">'
                            + ocWidget.locale.prechats[data.name].label + ': ' + this.isisNecessary(data.isNecessary) +'\
                            </div>\
                            <div  class="ocWidget__chat__mid__auth__inputs-select-wrap">\
                            <select required id="ocWidget-auth-'+data.name+'"\
                                        name="'+data.name+'"\
                                        class="ocWidget__chat__mid__auth__inputs-input--field ocWidget__chat__mid__auth__inputs-input--select ocWidget-text"\
                                        data-onchange="ocWidget.chat.auth.prechats.clearError(event);' + action + '">\
                                        <option value="">' + ocWidget.locale.prechats[data.name].placeholder + '</option>\
                                        ' + options + '\
                            </select>\
                            </div>\
                        </div>';
                    }

                    return result;
                },

                isisNecessary: function(flag){
                    var result = '';

                    if(flag){
                        result = '<span class="ocWidget__chat__mid__auth__inputs-input-isNecessary">*</span>';
                    }

                    return result;
                },

            },

            getFieldsString: function(allPrechats, activePrechats){
                var result = '', keyPrechat;
                for (var key in activePrechats) {
                    if(activePrechats.hasOwnProperty(key)) {
                        keyPrechat = activePrechats[key];
                        if(!allPrechats[keyPrechat].isEnabled) continue;
                        result += this.fieldsByTypes[allPrechats[keyPrechat].type](allPrechats[keyPrechat]);
                    } 
                }
                return result;
            },

            addSendBtn: function(content){
                var result = '<div class="ocWidget__chat__mid__auth__inputs">' + content + '</div>';

                if(screen === 'secondary') {

                    result += '<div class="ocWidget__chat__mid__auth--button ocWidget-btnBg" data-onclick="ocWidget.chat.auth.checkBeforeRequest()">' + ocWidget.locale.sendBtn + '</div>\
                                <div class="ocWidget__chat__mid__auth-secondary-showHistory ocWidget-btnDef" data-onclick="ocWidget.chat.offline.showHistory()">' + ocWidget.locale.history + '</div>';

                } else {
                    result += '<div class="ocWidget__chat__mid__auth--button ocWidget-btnBg" data-onclick="ocWidget.chat.auth.checkBeforeRequest()">' + ocWidget.locale.sendBtn + '</div>';
                }

                return result;
            },

            wrapControls: function(controls, screenPrechats){
                var result = '<div class="ocWidget__chat__mid__auth ocWidget__prechat-' + screenPrechats + '">'+
                                controls
                             +'</div>';

                return result;
            },

            print: function(screen){
                var prechatConfig = ocWidget.options.behaviour.prechats,
                    prechatsString = this.getFieldsString(prechatConfig.list, prechatConfig[screen]);

                if(prechatsString.length){
                    prechatsString = this.addSendBtn(prechatsString);

                    prechatsString = this.wrapControls(prechatsString, screen);
                }

                return prechatsString;
            }
        }

        return prechatsFactory.print(screen);
    },

    /**
     * Генерация каналов по вариантам шаблонов для разных экранов
     */
    channels: {

        tpls: {

            menu: function(data){
                return ' <a class="ocWidget__chat__mid__menu--block-wrapper-item ocWidget__chat__mid__menu--block-wrapper-item-' + data.type + '"\
                            href=' + data.link + ' target="_blank"><span class="ocWidget-text">' + data.title + '</span></a>'
            },

            offline: function(data){
                return ' <a class="ocWidget__chat__mid__offline--block-' + data.type + '" \
                                    href="' + data.link + '" target="_blank"></a>'
            },

            squareBarLinks: function(data) {
                return '<a href=' + data.link +
                ' target="_blank" class="ocWidget__bar--innerPanel-' + data.type + '">\
                <div class="ocWidget__bar--innerPanel-' + data.type + '-tooltip ocWidget-text">' + ocWidget.tools.capitalizeFirstLetter(data.title)
                 + '\</div></a>';
            },

            squareBarIcons: function(data){
                return '<span class="oc-ico oc-ico-' + data.type + '" style="transform: scale(0);"></span>';
            },

            roundBarIcons: function(data){
                return '<div class="ocWidget__bar__round__channels__channel">\
                            <a href=' + data.link + ' target="_blank" class="ocWidget__bar__round__channels__channel-' + data.type + '"></a>\
                            <div class="ocWidget__bar__round__channels__channel-tooltip ocWidget-text">' + ocWidget.tools.capitalizeFirstLetter(data.title) + '</div>\
                        </div>';
            }

        },

        changeBySkillInOfflineScreen: function(channels){
            // var channels = channels || Object.keys(ocWidget.options.channels.list);
            var channelsString = this.getChannelsForScreenString('offline', channels);

            this.changeChannel(channelsString);
        },

        changeChannel: function(channelsString){
            RTC('.ocWidget__chat__mid__offline--block-channels').innerHTML = channelsString;
        },

        getOneTypeChannels: function(keys){
            var newArr = [],
                types = [],
                allowedTypesChannels = ocWidget.options.alternativeChannels;

            for(var key = 0; key < keys.length; key++) {
                var idChannel = keys[key],
                    type = ocWidget.options.channels.list[key].type.toLowerCase();

                if(!allowedTypesChannels[type]) continue;

                if(!~types.indexOf(type)){
                    newArr.push(idChannel);
                    types.push(type);
                }
            }

            return newArr;
        },

        getCountOneTypeChannels: function(){
            return this.getOneTypeChannels(Object.keys(ocWidget.options.channels.list)).length;
        },

        getChannelsForScreenString: function(screen, channelsIds){
            var strChannels = '',
                idChannel = false,
                typesChannels = ocWidget.options.alternativeChannels,
                allChannels = ocWidget.options.channels.list,
                channelsIds = channelsIds || [],
                screen = screen || 'offline',
                keys = this.getOneTypeChannels(Object.keys(ocWidget.options.channels.list) || []);
            if(this.tpls[screen]){
                for(var key = 0; key < keys.length; key++) {
                    var idChannel = keys[key],
                        type = allChannels[idChannel].type.toLowerCase();
                    if(channelsIds.length && !~Array.prototype.indexOf.call(channelsIds, allChannels[idChannel].id)) continue;
                    if(!ocWidget.locale.channelsTitles[type]){
                        var errorText = "ocWidget: warning - undefined channel title in locale for type " + type;
                        console.error(errorText);
                        ocWidget.JSlogging.write(errorText);
                        continue;
                    }
                    strChannels += this.tpls[screen]({
                        type: type,
                        link: typesChannels[type] + allChannels[idChannel].external_id,
                        title: ocWidget.locale.channelsTitles[type]
                    });

                }

            }

            return strChannels;
        },

    },

    /**
     * Верстка offline заглушки
     */
    offline: {

        labels: {
            heading: ocWidget.locale.offline,
            text: ocWidget.options.behaviour.messageLcr,
            showHistory: ocWidget.locale.history
        },

        printAll: function(){
            return '<div class="ocWidget__chat__mid__offline">\
                    <div class="ocWidget__chat__mid__offline--block">\
                        <div class="ocWidget__chat__mid__offline--block-heading ocWidget-heading">' + this.labels.heading + '</div>\
                        <div class="ocWidget__chat__mid__offline--block-text">' + this.labels.text + '</div>\
                        <div class="ocWidget__chat__mid__offline--block-channels">'+
                            ocWidget.tpls.channels.getChannelsForScreenString('offline')
                        +'</div>\
                    </div>\
                    <div class="ocWidget__chat__mid__offline-showHistory ocWidget-btnDef"\
                         data-onclick="ocWidget.chat.offline.showHistory()">' + this.labels.showHistory + '</div>\
                </div>';
        }
    },

    /**
     * SVG иконки
     */
    svgIcons: {

        /**
         * Пути для генерации иконок
         * @type {Object:<Array>}
         * Key объекта - подставляется в symbol id="ocWidget_icon- + <key>
         * Array элементы - из них генерируются <path d= <arraysItem> 
         */
        iconPaths: {
            fb: [
                'M32 5.334c0-2.803-2.53-5.334-5.333-5.334h-21.333c-2.803 0-5.333 2.531-5.333 5.334v21.333c0 2.802 2.53 5.334 5.334 5.334h10.666v-12.089h-3.911v-5.333h3.911v-2.078c0-3.584 2.691-6.811 6-6.811h4.311v5.333h-4.311c-0.472 0-1.022 0.573-1.022 1.431v2.125h5.333v5.333h-5.333v12.089h5.689c2.803 0 5.333-2.531 5.333-5.334v-21.333z'
            ],
            telegram: [
                'M0.565 15.429l7.373 2.752 2.854 9.178c0.183 0.588 0.901 0.805 1.379 0.415l4.11-3.351c0.431-0.351 1.044-0.369 1.495-0.042l7.413 5.382c0.51 0.371 1.233 0.091 1.361-0.525l5.43-26.122c0.14-0.674-0.522-1.236-1.164-0.988l-30.261 11.674c-0.747 0.288-0.74 1.345 0.009 1.626zM10.333 16.716l14.41-8.875c0.259-0.159 0.525 0.191 0.303 0.397l-11.893 11.055c-0.418 0.389-0.688 0.91-0.764 1.475l-0.405 3.002c-0.054 0.401-0.617 0.441-0.727 0.053l-1.558-5.475c-0.178-0.624 0.082-1.291 0.634-1.632z'
            ],
            viber: [
                'M23.981 0.757c-2.404-0.481-5.168-0.757-7.996-0.757s-5.592 0.276-8.266 0.801l0.27-0.044c-2.321 0.517-5.241 3.315-5.812 5.565-0.453 1.973-0.712 4.238-0.712 6.564s0.26 4.591 0.751 6.769l-0.039-0.205c0.571 2.251 3.491 5.049 5.812 5.565v0c0.102 0.020 0.178 0.109 0.178 0.216v6.379c-0 0.002-0 0.005-0 0.007 0 0.194 0.157 0.352 0.352 0.352 0.102 0 0.195-0.044 0.259-0.114l0-0 5.878-6.034c0.039-0.041 0.095-0.066 0.156-0.066 0.002 0 0.004 0 0.007 0h-0c0.348 0.010 0.757 0.016 1.167 0.016 2.827 0 5.59-0.275 8.263-0.8l-0.27 0.044c2.321-0.517 5.242-3.315 5.812-5.565 0.454-1.973 0.713-4.238 0.713-6.564s-0.26-4.591-0.752-6.769l0.039 0.204c-0.567-2.251-3.487-5.048-5.809-5.565zM24.062 19.771c-0.469 0.986-1.139 1.805-2.11 2.329-0.275 0.148-0.604 0.196-0.914 0.291-0.352-0.108-0.697-0.182-1.013-0.312-3.273-1.357-6.284-3.109-8.674-5.794-1.356-1.524-2.418-3.25-3.316-5.074-0.425-0.865-0.784-1.758-1.15-2.657-0.334-0.815 0.158-1.656 0.675-2.269 0.488-0.559 1.082-1.011 1.753-1.327l0.033-0.014c0.527-0.253 1.048-0.108 1.434 0.34 0.81 0.913 1.544 1.93 2.17 3.016l0.048 0.089c0.381 0.689 0.277 1.532-0.414 2.001-0.168 0.117-0.321 0.248-0.477 0.376-0.141 0.106-0.26 0.232-0.356 0.374l-0.004 0.005c-0.090 0.151-0.143 0.333-0.143 0.527 0 0.139 0.027 0.272 0.077 0.393l-0.002-0.007c0.852 2.344 2.287 4.16 4.643 5.141 0.377 0.157 0.756 0.34 1.19 0.288 0.728-0.086 0.962-0.883 1.472-1.3s1.135-0.413 1.672-0.073 1.055 0.703 1.574 1.073c0.562 0.385 1.045 0.756 1.507 1.149l-0.026-0.021c0.451 0.397 0.606 0.918 0.353 1.456zM19.842 12.144c-0.203 0-0.123 0-0.046 0-0.327-0.012-0.505-0.204-0.54-0.517-0.022-0.258-0.057-0.491-0.107-0.719l0.007 0.036c-0.103-0.456-0.357-0.842-0.705-1.11l-0.004-0.003c-0.165-0.12-0.357-0.216-0.565-0.276l-0.013-0.003c-0.263-0.076-0.536-0.055-0.797-0.117-0.232-0.041-0.405-0.241-0.405-0.482 0-0.030 0.003-0.060 0.008-0.089l-0 0.003c0.048-0.238 0.256-0.415 0.505-0.415 0.013 0 0.026 0.001 0.040 0.002l-0.002-0c1.66 0.117 2.845 0.978 3.015 2.93 0.010 0.062 0.016 0.134 0.016 0.207s-0.006 0.145-0.017 0.215l0.001-0.008c-0.031 0.182-0.174 0.324-0.355 0.351l-0.002 0c-0.005-0.009-0.005-0.008-0.038-0.006zM18.811 7.675c-0.469-0.229-1.013-0.402-1.584-0.493l-0.033-0.004c-0.244-0.040-0.49-0.064-0.735-0.098-0.248-0.013-0.445-0.218-0.445-0.468 0-0.019 0.001-0.038 0.003-0.057l-0 0.002c0.002-0.253 0.207-0.458 0.461-0.458 0.018 0 0.036 0.001 0.054 0.003l-0.002-0c1.030 0.040 1.989 0.305 2.841 0.748l-0.037-0.018c1.776 0.938 2.79 2.425 3.086 4.407 0.013 0.090 0.035 0.178 0.042 0.268 0.016 0.223 0.027 0.445 0.045 0.738-0.007 0.11-0.022 0.212-0.045 0.311l0.003-0.013c-0.117 0.43-0.765 0.484-0.915 0.050-0.033-0.109-0.053-0.234-0.053-0.364 0-0.017 0-0.035 0.001-0.052l-0 0.002c0-0.023 0.001-0.050 0.001-0.077 0-0.927-0.243-1.797-0.669-2.55l0.013 0.026c-0.483-0.821-1.177-1.473-2.008-1.892l-0.028-0.013zM24.298 13.801c-0.343 0-0.497-0.283-0.519-0.586-0.045-0.61-0.075-1.22-0.158-1.825-0.443-3.188-2.985-5.827-6.159-6.392-0.477-0.086-0.966-0.108-1.45-0.158-0.306-0.032-0.703-0.050-0.774-0.431-0.057-0.319 0.212-0.572 0.516-0.586 0.082 0 0.165 0 0.248 0 4.111 0.117 0.251 0.009 0.011 0 4.275 0.124 7.785 2.963 8.538 7.191 0.129 0.721 0.173 1.458 0.234 2.19 0.013 0.302-0.161 0.594-0.493 0.598z'
            ],
            vk: [
                'M27.541 18.46c1.061 1.036 2.182 2.011 3.134 3.152 0.421 0.507 0.819 1.030 1.123 1.619 0.432 0.836 0.041 1.757-0.709 1.807l-4.662-0.002c-1.202 0.1-2.162-0.384-2.968-1.206-0.645-0.657-1.243-1.357-1.864-2.037-0.254-0.278-0.521-0.539-0.839-0.746-0.636-0.413-1.189-0.287-1.552 0.377-0.37 0.675-0.454 1.423-0.491 2.175-0.050 1.098-0.382 1.386-1.484 1.437-2.357 0.111-4.593-0.245-6.671-1.434-1.832-1.048-3.252-2.528-4.488-4.203-2.407-3.262-4.251-6.845-5.907-10.53-0.373-0.83-0.1-1.276 0.816-1.291 1.521-0.030 3.041-0.027 4.564-0.002 0.618 0.009 1.027 0.364 1.266 0.947 0.823 2.023 1.83 3.948 3.093 5.732 0.337 0.475 0.68 0.95 1.168 1.284 0.541 0.37 0.952 0.248 1.207-0.355 0.161-0.382 0.232-0.793 0.268-1.202 0.12-1.407 0.136-2.812-0.075-4.214-0.13-0.875-0.623-1.442-1.496-1.607-0.446-0.084-0.379-0.25-0.164-0.505 0.375-0.439 0.727-0.712 1.43-0.712h5.269c0.829 0.164 1.014 0.536 1.127 1.371l0.005 5.852c-0.009 0.323 0.161 1.282 0.743 1.496 0.466 0.152 0.773-0.22 1.052-0.516 1.261-1.339 2.162-2.921 2.966-4.559 0.357-0.72 0.664-1.469 0.961-2.216 0.22-0.555 0.566-0.828 1.191-0.816l5.071 0.005c0.15 0 0.302 0.002 0.448 0.027 0.854 0.146 1.089 0.513 0.825 1.348-0.416 1.309-1.225 2.4-2.016 3.496-0.846 1.17-1.75 2.3-2.589 3.477-0.77 1.075-0.709 1.617 0.248 2.55v0z'
            ],
            file: [
                'M27.917 7.917l-6.5-6.5c-0.695-0.694-1.612-1.146-2.75-1.354v10.604h10.605c-0.208-1.139-0.66-2.056-1.354-2.75z',
                'M18 13.333c-0.556 0-1.028-0.194-1.417-0.583s-0.583-0.861-0.583-1.417v-11.333h-11.333c-0.555 0-1.028 0.194-1.417 0.583s-0.583 0.861-0.583 1.417v28c0 0.556 0.194 1.028 0.583 1.417s0.861 0.583 1.417 0.583h22.667c0.555 0 1.027-0.195 1.416-0.583s0.583-0.861 0.583-1.417v-16.667h-11.333z'
            ],
        },

        /**
         * Шаблоны иконок
         */
        tpls: {
            /**
             * Возвращает контейнер для svg-символов
             * обернув им переданый в параметре контент
             * @param {String} content - html-код с svg-символами
             * @return {String} - весь html-код контейнера с svg-символами
             */
            symbolsContainer: function(content){
                return '<svg aria-hidden="true" \
                            style="position: absolute; width: 0; height: 0; overflow: hidden; display: none;" \
                            version="1.1" \
                            xmlns="http://www.w3.org/2000/svg" \
                            xmlns:xlink="http://www.w3.org/1999/xlink">\
                            <defs>\
                                ' + content + '\
                            </defs>\
                        </svg>'
            },

            /**
             * Шаблон символа иконки
             * @param {String} name - имя иконки
             * @param {Array.<string>} paths - массив с формами (путями) элемента 
             * @return {String} - html-код одного svg-символа
             */
            symbol: function(name, paths){
                var strResult= '';
                paths.forEach(function(path){
                    strResult += '<path d="' + path + '"></path>';
                });
                strResult = '<symbol id="ocWidget_icon-' + name + '">\
                                <title>' + name + '</title>\
                                ' + strResult + '\
                            </symbol>'
                return strResult;
            },

            /**
             * Шаблон символов иконкок генерируемых по переданным параметрам
             * @param {Object:<Array>} iconsData - параметры иконкок (имена и пути)
             * @return {String} - весь html-код svg-символов без контейнера
             */
            symbols: function(iconsData){
                var strResult = '';
                for(var key in iconsData){
                    strResult += this.symbol(key, iconsData[key]);
                }
                return strResult;
            },

            /**
             * Шаблон вывода иконки
             * @param {Object} options - настройки для иконки
             * @param {String} options.name - имя иконки (должно соответствовать одно из ключей iconPaths!)
             * @param {String} options.color - цвет иконки
             * @param {String} [options.width='100%'] - ширина иконки
             * @param {String} [options.height='100%'] - высота иконки
             * @return {String} - html-код svg-иконки
             */
            icon: function(options){
                options.width = options.width || '100%',
                options.height = options.height || '100%';
                return '<svg class="icon ocWidget_icon-' + options.name + '" \
                            width="' + options.width + '" \
                            height="' + options.height + '">\
                            <use xlink:href="#ocWidget_icon-' + options.name + '" \
                                    fill="' + options.color + '"\
                            ></use>\
                        </svg>';
            }
        },

        /**
         * Метод возвращающий данные для инициализации SVG-иконок
         * @return {DOM-Object} - DOM-объект c колассом "ocWidget_svg-icons" контейнера со всеми svg-символами
         */
        getObjectWithIconsSymbols: function(){
            var object = RTC().create('div', {
                className: 'ocWidget_svg-icons'
            });
            var strSymbols = this.tpls.symbols(this.iconPaths);
            strSymbols = this.tpls.symbolsContainer(strSymbols);
            object.innerHTML = strSymbols;
            return object;
        },

        /**
         * Вернуть HTML-строку с svg-иконкой
         * @param  {Object} options - параметры генерации иконки
         * @return {String} - html-код svg-иконки
         */
        get: function(options){
            return this.tpls.icon(options);
        }
        
    }

};
